'use client';

import React, { useEffect, useState } from 'react';
import {
  Chat,
  Channel,
  ChannelHeader,
  ChannelList,
  MessageInput,
  MessageList,
  Thread,
  Window,
  LoadingIndicator,
} from 'stream-chat-react';
import { StreamChat, Channel as StreamChannel } from 'stream-chat';
import { useAuth } from '@/lib/auth/auth-context';
import { getStreamChatClient, connectUser } from '@/lib/stream-chat/client';
import { toast } from 'sonner';

import 'stream-chat-react/dist/css/v2/index.css';

interface StreamChatWrapperProps {
  channelId?: string;
  channelType?: string;
}

export const StreamChatWrapper: React.FC<StreamChatWrapperProps> = ({
  channelId = 'general',
  channelType = 'messaging'
}) => {
  const { user, isAuthenticated } = useAuth();
  const [client, setClient] = useState<StreamChat | null>(null);
  const [channel, setChannel] = useState<StreamChannel | null>(null);
  const [loading, setLoading] = useState(true);

  // Temporary token generation (replace with backend API call)
  const generateUserToken = (userId: string, chatClient: StreamChat): string => {
    // In production, this should be generated by your backend using Stream's server-side SDK
    // For now, we'll use a development token
    return chatClient.devToken(userId);
  };

  useEffect(() => {
    const initializeChat = async () => {
      if (!isAuthenticated || !user) {
        setLoading(false);
        return;
      }

      try {
        // Get Stream Chat client first
        const chatClient = getStreamChatClient();
        
        // Generate user token with the client
        const userToken = generateUserToken(user.id, chatClient);
        
        // Connect user
        await connectUser(user.id, userToken, {
          username: user.username,
          avatar_url: user.avatar_url,
          is_online: user.is_online,
        });

        setClient(chatClient);

        // Create or get channel
        const chatChannel = chatClient.channel(channelType, channelId, {
          members: [user.id],
        });

        await chatChannel.create();
        setChannel(chatChannel);
      } catch (error) {
        console.error('Failed to initialize Stream Chat:', error);
        toast.error('Failed to connect to chat');
      } finally {
        setLoading(false);
      }
    };

    initializeChat();

    return () => {
      if (client) {
        client.disconnectUser();
      }
    };
  }, [user, isAuthenticated, channelId, channelType]);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-96">
        <LoadingIndicator />
      </div>
    );
  }

  if (!client || !channel) {
    return (
      <div className="flex items-center justify-center h-96">
        <p className="text-white/70">Unable to connect to chat</p>
      </div>
    );
  }

  return (
    <div className="h-full w-full">
      <Chat client={client} theme="str-chat__theme-dark">
        <Channel channel={channel}>
          <Window>
            <ChannelHeader />
            <MessageList />
            <MessageInput />
          </Window>
          <Thread />
        </Channel>
      </Chat>
    </div>
  );
};

export default StreamChatWrapper;